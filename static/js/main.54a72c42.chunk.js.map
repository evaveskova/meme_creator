{"version":3,"sources":["components/Meme.js","App.js","serviceWorker.js","index.js"],"names":["Meme","template","onClick","key","id","src","url","alt","name","objectToQueryParam","obj","Object","entries","map","value","join","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","className","style","width","height","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","process","password","placeholder","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAEaA,G,MAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,yBACEC,IAAKF,EAASG,GACdC,IAAKJ,EAASK,IACdC,IAAKN,EAASO,KACdN,QAASA,MCJTO,EAAqB,SAACC,GAE1B,MAAO,IADQC,OAAOC,QAAQF,GAAKG,KAAI,mCAAEV,EAAF,KAAOW,EAAP,qBAAqBX,EAArB,YAA4BW,MAC/CC,KAAK,MAoFZC,MAjFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,MAF5B,mBAENhB,EAFM,KAEImB,EAFJ,OAGiBH,mBAAS,IAH1B,mBAGNI,EAHM,KAGGC,EAHH,OAIuBL,mBAAS,IAJhC,mBAINM,EAJM,KAIMC,EAJN,OAKWP,mBAAS,MALpB,mBAKNQ,EALM,KAKAC,EALA,KAab,OANAC,qBAAU,WACRC,MAAM,wEAAwEC,MAAK,SAAAC,GAAC,OAClFA,EAAEC,OAAOF,MAAK,SAAAG,GAAQ,OAAIb,EAAaa,EAASC,KAAKC,eAEtD,IAECT,EACM,yBAAKU,UAAU,eACrB,yBAAK9B,IAAKoB,EAAMlB,IAAI,mBAAmB6B,MAAO,CAACC,MAAM,IAAKC,OAAO,QAKnE,yBAAKH,UAAU,aACZlC,GACC,0BACEsC,SAAQ,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,6DACRD,EAAEE,iBAEIC,EAAS,CACbC,YAAa3C,EAASG,GACtByC,MAAOxB,EACPyB,MAAOvB,EACPwB,SAAUC,aACVC,SAAUD,mBARJ,SAUepB,MAAM,4EAAD,OACkDnB,EAAmBkC,IAC/F,IAZM,cAUFX,EAVE,gBAcWA,EAASD,OAdpB,OAcFA,EAdE,OAeRL,EAAQK,EAAKE,KAAK3B,KAfV,2CAAF,uDAkBV,yBAAK6B,UAAU,UACf,oDAEE,kBAAC,EAAD,CAAMlC,SAAUA,IAChB,yBAAKkC,UAAU,cACf,2BACEe,YAAY,aACZpC,MAAOO,EACP8B,SAAU,SAAAX,GAAC,OAAIlB,EAAWkB,EAAEY,OAAOtC,UAErC,2BACEoC,YAAY,cACZpC,MAAOS,EACP4B,SAAU,SAAAX,GAAC,OAAIhB,EAAcgB,EAAEY,OAAOtC,UAExC,4BAAQqB,UAAU,cAAckB,KAAK,UAArC,kBAIFpD,GACA,oCACA,yBAAKkC,UAAU,UACb,uDAECjB,EAAUL,KAAI,SAAAZ,GACb,OACE,kBAAC,EAAD,CACEA,SAAUA,EACVC,QAAS,WACPkB,EAAYnB,YCnEVqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.54a72c42.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Meme = ({ template, onClick }) => {\n  return (\n    <img\n      key={template.id}\n      src={template.url}\n      alt={template.name}\n      onClick={onClick}\n    />\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return '?' + params.join('&');\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://cors-anywhere.herokuapp.com/http://api.imgflip.com/get_memes\").then(x =>\n      x.json().then(response => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (<div className=\"custom-meme\">\n      <img src={meme} alt=\"Your Custom Meme\" style={{width:800, height:800}}/>\n    </div>\n  );\n  }\n  return (\n    <div className=\"container\">\n      {template && (\n        <form\n          onSubmit={async e => {\n            e.preventDefault();\n\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: process.env.REACT_APP_IMGFLIP_USERNAME,\n              password: process.env.REACT_APP_IMGFLIP_PASSWORD\n            };\n            const response = await fetch(\n              `https://cors-anywhere.herokuapp.com/https://api.imgflip.com/caption_image${objectToQueryParam(params)}`,\n              {}\n            );\n            const json = await response.json();\n            setMeme(json.data.url)\n          }}\n        >\n        <div className=\"header\">\n        <h2>Customize Your Meme</h2>\n        </div>\n          <Meme template={template} />\n          <div className=\"form-input\">\n          <input\n            placeholder=\"First Text\"\n            value={topText}\n            onChange={e => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"Second Text\"\n            value={bottomText}\n            onChange={e => setBottomText(e.target.value)}\n          />\n          <button className=\"submit-meme\" type=\"submit\">Create Meme</button>\n          </div>\n        </form>\n      )}\n      {!template && (\n        <>\n        <div className=\"header\">\n          <h1>Choose a Meme Template</h1>\n          </div>\n          {templates.map(template => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}